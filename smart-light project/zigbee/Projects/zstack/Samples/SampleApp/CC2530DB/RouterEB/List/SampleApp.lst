###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         04/Aug/2016  11:36:38 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c                 #
#    Command line       =  -f C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wRouter.cfg (-DCPU32MHZ -DROOT=__near_func     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f #
#                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0               #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\lenovo\Desktop\1¡¢ #
#                          µã²¥\Projects\zstack\Samples\SampleApp\Source\Samp #
#                          leApp.c -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D   #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\RouterEB\List\ -lA        #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\RouterEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\RouterEB\Obj\ -e          #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\ -I                    #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\Source\ -I             #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  #
#                          -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\hal\include\ -I C:\Users\lenovo\Desktop\1¡¢µã² #
#                          ¥\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\target\CC2530EB\ -I       #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I C:\Users\lenovo\Desktop\1¡¢µã² #
#                          ¥\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\RouterEB\List\SampleApp.l #
#                          st                                                 #
#    Object file        =  C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\RouterEB\Obj\SampleApp.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include"string.h"
     77          /*********************************************************************
     78           * MACROS
     79           */
     80          //typedef unsigned short uint16;
     81          /*********************************************************************
     82           * CONSTANTS
     83           */
     84          
     85          /*********************************************************************
     86           * TYPEDEFS
     87           */
     88          
     89          /*********************************************************************
     90           * GLOBAL VARIABLES
     91           */
     92          
     93          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     94          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     95          {
     96            SAMPLEAPP_PERIODIC_CLUSTERID,
     97            SAMPLEAPP_FLASH_CLUSTERID
     98          };
     99          

   \                                 In  segment XDATA_ROM_C, align 1
    100          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    101          {
    102            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    103            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    104            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    105            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    106            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    107            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    108            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    109            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    111          };
    112          
    113          // This is the Endpoint/Interface description.  It is defined here, but
    114          // filled-in in SampleApp_Init().  Another way to go would be to fill
    115          // in the structure here and make it a "const" (in code space).  The
    116          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    118          
    119          /*********************************************************************
    120           * EXTERNAL VARIABLES
    121           */
    122          
    123          /*********************************************************************
    124           * EXTERNAL FUNCTIONS
    125           */
    126          
    127          /*********************************************************************
    128           * LOCAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131                                    // This variable will be received when
    132                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t Point_To_Point_DstAddr;//Íø·äµã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          static uint8 ID=7;
   \                     ID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ID>`
   \   000001                REQUIRE __INIT_XDATA_I
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    152          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    153          void SampleApp_SendPeriodicMessage( void );
    154          void SampleApp_SendFlashMessage( uint16 flashTime );
    155          void SampleApp_SendPointToPointMessage(uint8 *data );
    156          void SampleApp_CallBack(uint8 port, uint8 event);
    157          /*********************************************************************
    158           * NETWORK LAYER CALLBACKS
    159           */
    160          
    161          /*********************************************************************
    162           * PUBLIC FUNCTIONS
    163           */
    164          
    165          /*********************************************************************
    166           * @fn      SampleApp_Init
    167           *
    168           * @brief   Initialization function for the Generic App Task.
    169           *          This is called during initialization and should contain
    170           *          any application specific initialization (ie. hardware
    171           *          initialization/setup, table initialization, power up
    172           *          notificaiton ... ).
    173           *
    174           * @param   task_id - the ID assigned by OSAL.  This ID should be
    175           *                    used to send messages and set timers.
    176           *
    177           * @return  none
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    180          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    181            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    182            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#SampleApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    183            SampleApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#SampleApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    184           
    185            
    186            
    187            //MT_UartInit();//´®¿Ú³õÊ¼»¯
    188             halUARTCfg_t uartConfig;
    189            //------------------------ÅäÖÃ´®¿Ú---------------------------------
    190            uartConfig.configured           = TRUE;              
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   04           INC     A
   \   000022   F0           MOVX    @DPTR,A
    191            uartConfig.baudRate             = HAL_UART_BR_9600;
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
    192            uartConfig.flowControl          = FALSE;
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
    193            uartConfig.flowControlThreshold = 64;  
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7440         MOV     A,#0x40
   \   000036   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    194            uartConfig.rx.maxBufSize        = 128;  
   \                     ??CrossCallReturnLabel_1:
   \   000039   740A         MOV     A,#0xa
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
    195            uartConfig.tx.maxBufSize        = 128;  
   \                     ??CrossCallReturnLabel_4:
   \   000041   7412         MOV     A,#0x12
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine2 & 0xFFFF
    196            uartConfig.idleTimeout          = 6;    
   \                     ??CrossCallReturnLabel_5:
   \   000049   7405         MOV     A,#0x5
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   7406         MOV     A,#0x6
   \   000050   F0           MOVX    @DPTR,A
    197            uartConfig.intEnable            = TRUE; 
   \   000051   7416         MOV     A,#0x16
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
    198            uartConfig.callBackFunc         =SampleApp_CallBack;
   \   000059   741B         MOV     A,#0x1b
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   74..         MOV     A,#??SampleApp_CallBack?relay & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(??SampleApp_CallBack?relay >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    199            HalUARTOpen (0, &uartConfig); 
   \   000065                ; Setup parameters for call to function HalUARTOpen
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   7900         MOV     R1,#0x0
   \   000071   12....       LCALL   ??HalUARTOpen?relay
    200            //HalUARTWrite(0,"DEVICE START:\r\n",strlen("DEVICE START:\r\n"));
    201            
    202            
    203            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000074                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000074   EE           MOV     A,R6
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   ??MT_UartRegisterTaskID?relay
    204            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C0C         MOV     R4,#0xc
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   00007F   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000081   7900         MOV     R1,#0x0
   \   000083   12....       LCALL   ??HalUARTWrite?relay
    205            MicroWait(3200);
   \   000086                ; Setup parameters for call to function Onboard_wait
   \   000086   7A80         MOV     R2,#-0x80
   \   000088   7B0C         MOV     R3,#0xc
   \   00008A   12....       LCALL   ??Onboard_wait?relay
    206            P1_2=0;
   \   00008D   C292         CLR     0x90.2
    207            //halRfSetGain(1);
    208            
    209            // Device hardware initialization can be added here or in main() (Zmain.c).
    210            // If the hardware is application specific - add it here.
    211            // If the hardware is other parts of the device add it in main().
    212          
    213           #if defined ( BUILD_ALL_DEVICES )
    214            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    215            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    216            // together - if they are - we will start up a coordinator. Otherwise,
    217            // the device will start as a router.
    218            if ( readCoordinatorJumper() )
    219              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    220            else
    221              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    222          #endif // BUILD_ALL_DEVICES
    223          
    224          #if defined ( HOLD_AUTO_START )
    225            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    226            //  from starting the device and wait for the application to
    227            //  start the device.
    228            ZDOInitDevice(0);
    229          #endif
    230          
    231            // Setup for the periodic message's destination address
    232            // Broadcast to everyone
    233            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00008F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000092   740F         MOV     A,#0xf
   \   000094   F0           MOVX    @DPTR,A
    234            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000095   A3           INC     DPTR
   \   000096   7414         MOV     A,#0x14
   \   000098   F0           MOVX    @DPTR,A
    235            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000099   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00009C   74FF         MOV     A,#-0x1
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   F0           MOVX    @DPTR,A
    236          
    237            // Setup for the flash command's destination address - Group 1
    238            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   0000A1   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   F0           MOVX    @DPTR,A
    239            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000A7   A3           INC     DPTR
   \   0000A8   7414         MOV     A,#0x14
   \   0000AA   F0           MOVX    @DPTR,A
    240            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   0000AB   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    241            
    242            // Íø·äµã¶ÔµãÍ¨Ñ¶¶¨Òå
    243              Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µã²¥
   \                     ??CrossCallReturnLabel_2:
   \   0000B3   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   F0           MOVX    @DPTR,A
    244              Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000B9   A3           INC     DPTR
   \   0000BA   7414         MOV     A,#0x14
   \   0000BC   F0           MOVX    @DPTR,A
    245              Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //·¢¸øÐ­µ÷Æ÷
   \   0000BD   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
    246          
    247          
    248            // Fill out the endpoint description.
    249            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   0000C4   90....       MOV     DPTR,#SampleApp_epDesc
   \   0000C7   7414         MOV     A,#0x14
   \   0000C9   F0           MOVX    @DPTR,A
    250            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   0000CA   A3           INC     DPTR
   \   0000CB   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000D1   F0           MOVX    @DPTR,A
    251            SampleApp_epDesc.simpleDesc
    252                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000D2   A3           INC     DPTR
   \   0000D3   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000D9   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    253            SampleApp_epDesc.latencyReq = noLatencyReqs;
    254          
    255            // Register the endpoint description with the AF
    256            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_0:
   \   0000DC                ; Setup parameters for call to function afRegister
   \   0000DC   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000DE   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000E0   12....       LCALL   ??afRegister?relay
    257          
    258            // Register for all key events - This app will handle all key events
    259            RegisterForKeys( SampleApp_TaskID );
   \   0000E3                ; Setup parameters for call to function RegisterForKeys
   \   0000E3   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   ??RegisterForKeys?relay
    260          
    261            // By default, all devices start out in Group 1
    262            SampleApp_Group.ID = 0x0001;
   \   0000EB   90....       MOV     DPTR,#SampleApp_Group
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    263            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_3:
   \   0000F3                ; Setup parameters for call to function osal_memcpy
   \   0000F3   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000F6   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000F9   F5..         MOV     ?V0 + 2,A
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000100   7C07         MOV     R4,#0x7
   \   000102   7D00         MOV     R5,#0x0
   \   000104   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000106   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000108   12....       LCALL   ??osal_memcpy?relay
   \   00010B   7403         MOV     A,#0x3
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
    264            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000110                ; Setup parameters for call to function aps_AddGroup
   \   000110   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000112   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000114   7914         MOV     R1,#0x14
   \   000116   12....       LCALL   ??aps_AddGroup?relay
    265          
    266          #if defined ( LCD_SUPPORTED )
    267            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000119                ; Setup parameters for call to function HalLcdWriteString
   \   000119   7901         MOV     R1,#0x1
   \   00011B   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   00011D   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   00011F   12....       LCALL   ??HalLcdWriteString?relay
    268          #endif
    269          }
   \   000122   741D         MOV     A,#0x1d
   \   000124   02....       LJMP    ??Subroutine4_0 & 0xFFFF
   \   000127                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7480         MOV     A,#-0x80
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    270          
    271          /*********************************************************************
    272           * @fn      SampleApp_ProcessEvent
    273           *
    274           * @brief   Generic Application Task event processor.  This function
    275           *          is called to process all events for the task.  Events
    276           *          include timers, messages and any other user defined events.
    277           *
    278           * @param   task_id  - The OSAL assigned task ID.
    279           * @param   events - events to process.  This is a bit map and can
    280           *                   contain more than one event.
    281           *
    282           * @return  none
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    285          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    286            afIncomingMSGPacket_t *MSGpkt;
    287            (void)task_id;  // Intentionally unreferenced parameter
    288          
    289            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   605A         JZ      ??SampleApp_ProcessEvent_0
    290            {
    291              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??SampleApp_ProcessEvent_1
    292              while ( MSGpkt )
    293              {
    294                switch ( MSGpkt->hdr.event )
    295                {
    296                  // Received when a key is pressed
    297                  case KEY_CHANGE:
    298                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    299                    break;
    300          
    301                  // Received when a messages is received (OTA) for this endpoint
    302                  case AF_INCOMING_MSG_CMD:
    303                    SampleApp_MessageMSGCB( MSGpkt );
    304                    break;
    305          
    306                  // Received whenever the device changes state in the network
    307                  case ZDO_STATE_CHANGE:
    308                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    309                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)|| //Ð­µ÷Æ÷²»¸ø×Ô¼ºµã²¥
    310                         (SampleApp_NwkState == DEV_ROUTER)
    311                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    312                    {
    313                      // Start sending the periodic message in a regular interval.
    314                      //osal_start_timerEx( SampleApp_TaskID,
    315                                       // SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    316                                       // SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    317                    }
    318                    else
    319                    {
    320                      // Device is no longer in the network
    321                    }
    322                    break;
    323          
    324                  default:
    325                    break;
    326                }
    327          
    328                // Release the memory
    329                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    330          
    331                // Next - if one is available
    332                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   602E         JZ      ??SampleApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   601C         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   245A         ADD     A,#0x5a
   \   00003C   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00003E   24EF         ADD     A,#-0x11
   \   000040   60CE         JZ      ??SampleApp_ProcessEvent_2
   \   000042   80D2         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000044                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000054   80C0         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005D   80B7         SJMP    ??SampleApp_ProcessEvent_3
    333              }
    334          
    335              // return unprocessed events
    336              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00005F   AA..         MOV     R2,?V0 + 0
   \   000061   E5..         MOV     A,?V0 + 1
   \   000063   6480         XRL     A,#0x80
   \   000065   FB           MOV     R3,A
   \   000066   8004         SJMP    ??SampleApp_ProcessEvent_7
    337            }
    338          
    339            // Send a message out - This event is generated by a timer
    340            //  (setup in SampleApp_Init()).
    341           // if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
    342           // {
    343              // Send the periodic message
    344              //SampleApp_SendPeriodicMessage();//ÖÜÆÚÐÔ·¢ËÍº¯Êý
    345               //SampleApp_SendPointToPointMessage();//´Ë´¦Ìæ»»³Éµã²¥º¯Êý
    346               
    347              // Setup to send message again in normal period (+ a little jitter)
    348              //osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    349                 // (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    350          
    351              // return unprocessed events
    352             // return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
    353            //}
    354          
    355            // Discard unknown events
    356            return 0;
   \                     ??SampleApp_ProcessEvent_0:
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   00006C   7F04         MOV     R7,#0x4
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
    357          }
    358          
    359          /*********************************************************************
    360           * Event Generation Functions
    361           */
    362          /*********************************************************************
    363           * @fn      SampleApp_HandleKeys
    364           *
    365           * @brief   Handles all key events for this device.
    366           *
    367           * @param   shift - true if in shift/alt.
    368           * @param   keys - bit field for key events. Valid entries:
    369           *                 HAL_KEY_SW_2
    370           *                 HAL_KEY_SW_1
    371           *
    372           * @return  none
    373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    375          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    376            (void)shift;  // Intentionally unreferenced parameter
    377            
    378            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    379            {
    380              /* This key sends the Flash Command is sent to Group 1.
    381               * This device will not receive the Flash Command from this
    382               * device (even if it belongs to group 1).
    383               */
    384              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    385            }
    386          
    387            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    388            {
    389              /* The Flashr Command is sent to Group 1.
    390               * This key toggles this device in and out of group 1.
    391               * If this device doesn't belong to group 1, this application
    392               * will not receive the Flash command sent to group 1.
    393               */
    394              aps_Group_t *grp;
    395              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    396              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    397              {
    398                // Remove from the group
    399                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    400              }
    401              else
    402              {
    403                // Add to the flash group
    404                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    405              }
    406            }
    407          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B                REQUIRE ?Subroutine1
   \   00003B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    408          
    409          /*********************************************************************
    410           * LOCAL FUNCTIONS
    411           */
    412          
    413          /*********************************************************************
    414           * @fn      SampleApp_MessageMSGCB
    415           *
    416           * @brief   Data message processor callback.  This function processes
    417           *          any incoming data - probably from other devices.  So, based
    418           *          on cluster ID, perform the intended action.
    419           *
    420           * @param   none
    421           *
    422           * @return  none
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    425          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV     A,#-0x32
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    426            uint16 flashTime;
    427           // uint8 asc_16[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    428            switch ( pkt->clusterId )
                   ^
Warning[Pe546]: transfer of control bypasses initialization of:
            variable "buff" (declared at line 432 of
                      "C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Samples\
                      SampleApp\Source\SampleApp.c")

    uint16 flashTime;
           ^
"C:\Users\lenovo\Desktop\1¡¢µã²¥\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",426  Warning[Pe550]: 
          variable "flashTime" was set but never used
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6403         XRL     A,#0x3
   \   000019   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   00001D   7070         JNZ     ??SampleApp_MessageMSGCB_1
    429            {
    430              case SAMPLEAPP_POINT_TO_POINT_CLUSTERID:
    431                HalLedBlink( HAL_LED_2, 1, 50, 200);
   \   00001F                ; Setup parameters for call to function HalLedBlink
   \   00001F   7CC8         MOV     R4,#-0x38
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7B32         MOV     R3,#0x32
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7902         MOV     R1,#0x2
   \   000029   12....       LCALL   ??HalLedBlink?relay
    432                uint8 buff[50]={0};
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AC82         MOV     R4,DPL
   \   000034   AD83         MOV     R5,DPH
   \   000036   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000039   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00003C   7432         MOV     A,#0x32
   \   00003E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    433                osal_memcpy(buff,pkt->cmd.Data,50);
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   EE           MOV     A,R6
   \   000042   2422         ADD     A,#0x22
   \   000044   F582         MOV     DPL,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0 + 0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0 + 1,A
   \   000052   75..00       MOV     ?V0 + 2,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005A   7C32         MOV     R4,#0x32
   \   00005C   7D00         MOV     R5,#0x0
   \   00005E   7403         MOV     A,#0x3
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   12....       LCALL   ??osal_memcpy?relay
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    434                HalUARTWrite(0,(uint8 *)buff,strlen((char *)buff));
   \   00006F                ; Setup parameters for call to function HalUARTWrite
   \   00006F                ; Setup parameters for call to function strlen
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   AA82         MOV     R2,DPL
   \   000077   AB83         MOV     R3,DPH
   \   000079   12....       LCALL   ??strlen?relay
   \   00007C   EA           MOV     A,R2
   \   00007D   FC           MOV     R4,A
   \   00007E   EB           MOV     A,R3
   \   00007F   FD           MOV     R5,A
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   AA82         MOV     R2,DPL
   \   000088   AB83         MOV     R3,DPH
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   12....       LCALL   ??HalUARTWrite?relay
    435               // HalUARTWrite(0,"\r\n",1);
    436               /*
    437                 uint16 mAddr=pkt->srcAddr.addr.shortAddr;
    438                uint8 mID=pkt->cmd.Data[0];
    439                uint8 mPAddrH=pkt->cmd.Data[1];
    440                uint8 mPAddrL=pkt->cmd.Data[2];
    441                HalUARTWrite(0,&mID,1);
    442                HalUARTWrite(0," 0X:",4);
    443                HalUARTWrite(0,&asc_16[mAddr/4096],1);
    444                HalUARTWrite(0,&asc_16[mAddr%4096/256],1);
    445                HalUARTWrite(0,&asc_16[mAddr%256/16],1);
    446                HalUARTWrite(0,&asc_16[mAddr%16],1); 
    447                HalUARTWrite(0," 0X:",4);
    448                HalUARTWrite(0,&asc_16[mPAddrH/16],1);
    449                HalUARTWrite(0,&asc_16[mPAddrH%16],1);
    450                HalUARTWrite(0,&asc_16[mPAddrL/16],1);
    451                HalUARTWrite(0,&asc_16[mPAddrL%16],1); 
    452                HalUARTWrite(0,"\n",1);
    453                */
    454                break;
    455          
    456              case SAMPLEAPP_FLASH_CLUSTERID:
    457                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    458                //HalLedBlink( HAL_LED_1, 4, 50, (flashTime / 4) );
    459                break;
    460            }
    461          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   00008F                REQUIRE ?Subroutine0
   \   00008F                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7432         MOV     A,#0x32
   \   000002                REQUIRE ??Subroutine4_0
   \   000002                ; // Fall through to label ??Subroutine4_0
    462          
    463          /*********************************************************************
    464           * @fn      SampleApp_SendPeriodicMessage
    465           *
    466           * @brief   Send the periodic message.
    467           *
    468           * @param   none
    469           *
    470           * @return  none
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    473          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    474            //uint8 data[10]={'0','1','2','3','4','5','6','7','8','\m'};//×Ô¶¨ÒåÊý¾Ý
    475            //HalUARTWrite(0,data,10);
    476            /*
    477              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    478                                   SAMPLEAPP_PERIODIC_CLUSTERID,
    479                                   10,//×Ö½ÚÊý
    480                                   data,//Ö¸ÕëÍ·
    481                                   &SampleApp_TransID,
    482                                   AF_DISCV_ROUTE,
    483                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    484              {
    485              }
    486              else
    487              {
    488                // Error occurred in request to send.
    489              }
    490            */
    491          }
   \   000000   02....       LJMP    ?BRET
    492          
    493          /*********************************************************************
    494           * @fn      SampleApp_SendFlashMessage
    495           *
    496           * @brief   Send the flash message to group 1.
    497           *
    498           * @param   flashTime - in milliseconds
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    503          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    504            uint8 buffer[3];
    505            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    506            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    507            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    508          
    509            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    510                                 SAMPLEAPP_FLASH_CLUSTERID,
    511                                 3,
    512                                 buffer,
    513                                 &SampleApp_TransID,
    514                                 AF_DISCV_ROUTE,
    515                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    516            {
    517            }
    518            else
    519            {
    520              // Error occurred in request to send.
    521            }
    522          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF
    523          
    524          /*********************************************************************
    525          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void SampleApp_SendPointToPointMessage(uint8 *data )
   \                     SampleApp_SendPointToPointMessage:
    527          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV     A,#-0x32
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    528          // const int n=strlen((char*)data)+1;
    529            uint8 sdata[50]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001A   7432         MOV     A,#0x32
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    530            sdata[0]=ID+48;
   \   00001F   90....       MOV     DPTR,#ID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2430         ADD     A,#0x30
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   F0           MOVX    @DPTR,A
    531            sdata[1]=',';
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   742C         MOV     A,#0x2c
   \   000033   F0           MOVX    @DPTR,A
    532            osal_memcpy(&sdata[2],data,48);
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   75..00       MOV     ?V0 + 2,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000040   7C30         MOV     R4,#0x30
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??osal_memcpy?relay
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    533            if ( AF_DataRequest( &Point_To_Point_DstAddr,
    534                                 &SampleApp_epDesc,
    535                                 SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    536                                 50,
    537                                 sdata,
    538                                 &SampleApp_TransID,
    539                                 AF_DISCV_ROUTE,
    540                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000055                ; Setup parameters for call to function AF_DataRequest
   \   000055   75..1E       MOV     ?V0 + 0,#0x1e
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000060   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   8582..       MOV     ?V0 + 0,DPL
   \   000070   8583..       MOV     ?V0 + 1,DPH
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   75..32       MOV     ?V0 + 0,#0x32
   \   00007B   75..00       MOV     ?V0 + 1,#0x0
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75..03       MOV     ?V0 + 0,#0x3
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7920         MOV     R1,#0x20
   \   00008D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00008F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000091   7A..         MOV     R2,#Point_To_Point_DstAddr & 0xff
   \   000093   7B..         MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
   \   000095   12....       LCALL   ??AF_DataRequest?relay
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   E9           MOV     A,R1
   \   00009E   700D         JNZ     ??SampleApp_SendPointToPointMessage_0
    541            {
    542               HalLedBlink(HAL_LED_1,2,50,150);
   \   0000A0                ; Setup parameters for call to function HalLedBlink
   \   0000A0   7C96         MOV     R4,#-0x6a
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7B32         MOV     R3,#0x32
   \   0000A6   7A02         MOV     R2,#0x2
   \   0000A8   7901         MOV     R1,#0x1
   \   0000AA   12....       LCALL   ??HalLedBlink?relay
    543            }
    544            else
    545            {
    546              // Error occurred in request to send.
    547            }
    548          }
   \                     ??SampleApp_SendPointToPointMessage_0:
   \   0000AD   02....       LJMP    ?Subroutine0 & 0xFFFF
    549          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          void SampleApp_CallBack(uint8 port, uint8 event)
   \                     SampleApp_CallBack:
    551          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV     A,#-0x30
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    552            P1_2=0;
   \   00000C   C292         CLR     0x90.2
    553            MicroWait(3200);
   \   00000E                ; Setup parameters for call to function Onboard_wait
   \   00000E   7A80         MOV     R2,#-0x80
   \   000010   7B0C         MOV     R3,#0xc
   \   000012   12....       LCALL   ??Onboard_wait?relay
    554            uint8 FixedString[48]={0};
   \   000015   90....       MOV     DPTR,#`?<Constant {0}>_2`
   \   000018   C082         PUSH    DPL
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   AC82         MOV     R4,DPL
   \   000022   AD83         MOV     R5,DPH
   \   000024   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000027   D082         POP     DPL
   \   000029   7430         MOV     A,#0x30
   \   00002B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    555            if (event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
   \   00002E   7407         MOV     A,#0x7
   \   000030   5E           ANL     A,R6
   \   000031   6036         JZ      ??SampleApp_CallBack_0
    556            {
    557              HalUARTRead(0,(unsigned char*)FixedString,48);
   \   000033                ; Setup parameters for call to function HalUARTRead
   \   000033   7C30         MOV     R4,#0x30
   \   000035   7D00         MOV     R5,#0x0
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   ??HalUARTRead?relay
    558              if(FixedString[0]!=0)
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6007         JZ      ??SampleApp_CallBack_1
    559              SampleApp_SendPointToPointMessage(FixedString);
   \   00004F                ; Setup parameters for call to function SampleApp_SendPointToPointMessage
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??SampleApp_SendPointToPointMessage?relay
    560              osal_memset(FixedString,0,48);
   \                     ??SampleApp_CallBack_1:
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C30         MOV     R4,#0x30
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ??osal_memset?relay
    561            }
    562            
    563          }
   \                     ??SampleApp_CallBack_0:
   \   000069   7430         MOV     A,#0x30
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   7F01         MOV     R7,#0x1
   \   000070   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000073                REQUIRE _A_P1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ID>`:
   \   000000   07           DB 7

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_CallBack                 2      0     57
       -> Onboard_wait                  0      0    114
       -> HalUARTRead                   0      0    114
       -> SampleApp_SendPointToPointMessage
                                        0      0    114
       -> osal_memset                   0      0    114
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     43
       -> HalUARTOpen                   0      0     80
       -> MT_UartRegisterTaskID         0      0     80
       -> HalUARTWrite                  0      0     80
       -> Onboard_wait                  0      0     80
       -> afRegister                    0      0     80
       -> RegisterForKeys               0      0     80
       -> osal_memcpy                   0      0     86
       -> aps_AddGroup                  0      0     80
       -> HalLcdWriteString             0      0     80
     SampleApp_MessageMSGCB             2      0     76
       -> HalLedBlink                   0      0    122
       -> osal_memcpy                   0      0    128
       -> strlen                        0      0    122
       -> HalUARTWrite                  0      0    122
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0      0
     SampleApp_SendPointToPointMessage
                                        2      0    127
       -> osal_memcpy                   0      0    128
       -> AF_DataRequest                0      0    140
       -> HalLedBlink                   0      0    122


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     _A_P1                                        1
     SampleApp_ClusterList                        6
     SampleApp_SimpleDesc                        12
     SampleApp_epDesc                             6
     SampleApp_TaskID                             1
     SampleApp_NwkState                           1
     SampleApp_TransID                            1
     SampleApp_Periodic_DstAddr                  12
     SampleApp_Flash_DstAddr                     12
     Point_To_Point_DstAddr                      12
     SampleApp_Group                             18
     SampleAppPeriodicCounter                     1
     SampleAppFlashCounter                        1
     ID                                           1
     SampleApp_Init                             295
     ?Subroutine2                                 2
     ??Subroutine3_0                              5
     ??Subroutine4_0                              8
     SampleApp_ProcessEvent                     113
     SampleApp_HandleKeys                        59
     ?Subroutine1                                 5
     SampleApp_MessageMSGCB                     143
     ?Subroutine0                                 2
     SampleApp_SendPeriodicMessage                3
     SampleApp_SendFlashMessage                 121
     SampleApp_SendPointToPointMessage
                                                176
     SampleApp_CallBack                         115
     ?<Initializer for ID>                        1
     ??SampleApp_Init?relay                       6
     ??SampleApp_ProcessEvent?relay               6
     ??SampleApp_HandleKeys?relay                 6
     ??SampleApp_MessageMSGCB?relay               6
     ??SampleApp_SendPeriodicMessage?relay        6
     ??SampleApp_SendFlashMessage?relay           6
     ??SampleApp_SendPointToPointMessage?relay    6
     ??SampleApp_CallBack?relay                   6
     ?<Constant "Hello World\n">                 13
     ?<Constant "Group 1">                        8
     ?<Constant "SampleApp">                     10
     ?<Constant {0}>                             50
     ?<Constant {0}>_1                           50
     ?<Constant {0}>_2                           48

 
 1 047 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   197 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 096 bytes of CODE  memory
   197 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    66 bytes of XDATA memory

Errors: none
Warnings: 2
